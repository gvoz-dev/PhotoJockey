status=warn
name=PropertiesConfig

# Give directory path where log files should get stored
property.basePath=./log

# ConsoleAppender will print logs on console
appender.console.type=Console
appender.console.name=consoleLogger
appender.console.layout.type=PatternLayout
appender.console.layout.pattern=%d{yyyy-MM-dd HH:mm:ss.SSS} %level [%t] [%c] [%M] [%l] - %msg%n

# RollingFileAppender will print logs in file which can be rotated based on time or size
appender.rolling.type=RollingFile
appender.rolling.name=fileLogger
appender.rolling.fileName=${basePath}/pj.log
appender.rolling.filePattern=${basePath}/pj_%d{yyyyMMdd}.log.gz
appender.rolling.layout.type=PatternLayout
appender.rolling.layout.pattern=%d{yyyy-MM-dd HH:mm:ss.SSS} %level [%t] [%c] [%M] [%l] - %msg%n
appender.rolling.policies.type=Policies
# Rotate log file each day and keep 30 days worth
appender.rolling.policies.size.type=SizeBasedTriggeringPolicy
appender.rolling.policies.size.size=10MB
appender.rolling.policies.time.type=TimeBasedTriggeringPolicy
appender.rolling.policies.time.interval=1
appender.rolling.policies.time.modulate=true
appender.rolling.strategy.type=DefaultRolloverStrategy
appender.rolling.strategy.delete.type=Delete
appender.rolling.strategy.delete.basePath=${basePath}
appender.rolling.strategy.delete.maxDepth=1
appender.rolling.strategy.delete.ifLastModified.type=IfLastModified
# Delete files older than 30 days
appender.rolling.strategy.delete.ifLastModified.age=30d

# Configure root logger
rootLogger.level=error
rootLogger.additivity=false
rootLogger.appenderRef.rolling.ref=fileLogger
rootLogger.appenderRef.console.ref=consoleLogger
